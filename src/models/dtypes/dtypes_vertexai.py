from typing import List, Optional

import pydantic


class LogProbToken(pydantic.BaseModel):
    token: str
    logProbability: float


class LogProbCandidate(pydantic.BaseModel):
    candidates: List[LogProbToken]


class CandidateLogProbs(pydantic.BaseModel):
    topCandidates: List[LogProbCandidate]

    chosenCandidates: List[LogProbToken]


class Part(pydantic.BaseModel):
    text: str


class Content(pydantic.BaseModel):
    role: str

    parts: Optional[List[Part]]


class SafetyRating(pydantic.BaseModel):
    category: str
    probability: str
    probabilityScore: float
    severity: str
    severityScore: float


class CitationSource(pydantic.BaseModel):
    startIndex: Optional[int] = None
    endIndex: Optional[int] = None
    uri: Optional[str] = None


class CitationMetadata(pydantic.BaseModel):
    citations: List[CitationSource]


class Candidate(pydantic.BaseModel):
    content: Optional[Content] = None

    finishReason: Optional[str] = None
    """The reason why the model stopped generating tokens.

    If empty, the model has not stopped generating the tokens.

        Values:
            FINISH_REASON_UNSPECIFIED (0):
                The finish reason is unspecified.
            STOP (1):
                Token generation reached a natural stopping
                point or a configured stop sequence.
            MAX_TOKENS (2):
                Token generation reached the configured
                maximum output tokens.
            SAFETY (3):
                Token generation stopped because the content potentially
                contains safety violations. NOTE: When streaming,
                [content][google.cloud.aiplatform.v1beta1.Candidate.content]
                is empty if content filters blocks the output.
            RECITATION (4):
                Token generation stopped because the content
                potentially contains copyright violations.
            OTHER (5):
                All other reasons that stopped the token
                generation.
            BLOCKLIST (6):
                Token generation stopped because the content
                contains forbidden terms.
            PROHIBITED_CONTENT (7):
                Token generation stopped for potentially
                containing prohibited content.
            SPII (8):
                Token generation stopped because the content
                potentially contains Sensitive Personally
                Identifiable Information (SPII).
            MALFORMED_FUNCTION_CALL (9):
                The function call generated by the model is
                invalid.
    """

    avgLogprobs: Optional[float] = None

    logprobsResult: Optional[CandidateLogProbs] = None

    safetyRatings: Optional[List[SafetyRating]] = None

    citationMetadata: Optional[CitationMetadata] = None


class CompletionUsage(pydantic.BaseModel):
    candidatesTokenCount: Optional[int] = None
    """Number of tokens in the generated completion."""

    promptTokenCount: int
    """Number of tokens in the prompt."""

    totalTokenCount: int
    """Total number of tokens used in the request (prompt + completion)."""


class PromptFeedback(pydantic.BaseModel):
    blockReason: Optional[str] = None


class ChatCompletion(pydantic.BaseModel):
    candidates: Optional[List[Candidate]] = None
    """A list of chat completion candidates.

    Can be more than one if `candidateCount` is greater than 1.
    """

    promptFeedback: Optional[PromptFeedback] = None
    """The reason in case the model refuses to give any completion candidates.

    Can happen in case of NSFW content.
    """

    modelVersion: str
    """The model used for the chat completion."""

    usageMetadata: Optional[CompletionUsage] = None
    """Usage statistics for the completion request."""
